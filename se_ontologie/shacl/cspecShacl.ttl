# baseURI: http://ontologie.crow.nl/model/cspec/201711/
# prefix: modelspec

@prefix cdoc: <http://ontologie.crow.nl/document/201711/> .
@prefix cspec: <http://ontologie.crow.nl/bibliotheekspecificatie/201711/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix modelcdoc: <http://ontologie.crow.nl/model/cdoc/201711/> .
@prefix modelspec: <http://ontologie.crow.nl/model/cspec/201711/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix spin: <http://spinrdf.org/spin#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

cspec:code
  a sh:PropertyShape ;
  sh:path cspec:code ;
  rdfs:label "code"@nl ;
  sh:datatype sh:literal ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:maxCount 1 ;
  sh:message "Er mag maximaal één code worden opgevoerd" ;
  sh:name "cspec:code" ;
  sh:severity sh:Violation ;
.
modelspec:
  a owl:Ontology ;
.
modelspec:Activiteit
  a sh:NodeShape ;
  rdfs:comment "Iets dat gebeurt" ;
  rdfs:label "Activiteit"@nl ;
  sh:name "cspec:Activiteit" ;
  sh:property modelspec:bestaatUit ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:isGespecificeerdDoor ;
  sh:property modelspec:isLidVan ;
  sh:property modelspec:vervult ;
  sh:targetClass cspec:Activiteit ;
.
modelspec:Collectie
  a sh:NodeShape ;
  rdfs:comment "Een verzameling van dingen die bij elkaar horen"@nl ;
  rdfs:label "Collectie"@nl ;
  sh:name "cspec:Collectie" ;
  sh:property modelspec:bestaatUit ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftLid ;
  sh:property modelspec:heeftStatus ;
  sh:targetClass cspec:Collectie ;
.
modelspec:Dataset
  a sh:NodeShape ;
  rdfs:comment "Een collectie van bibliotheekdata die zijn gebpubliceerd om contracten mee op te stellen" ;
  rdfs:label "Dataset"@nl ;
  sh:name "cspec:Dataset" ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:isDatasetVoor ;
  sh:property modelspec:isLidVan ;
  sh:targetClass cspec:Dataset ;
.
modelspec:Eenheid
  a sh:NodeShape ;
  rdfs:comment "De dimensie van de grootheid waarin een aspect wordt uitgedrukt" ;
  rdfs:label "Eenheid"@nl ;
  sh:name "cspec:Eenheid" ;
  sh:property modelspec:bestaatUit ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:isEenheidVoor ;
  sh:property modelspec:isLidVan ;
  sh:targetClass cspec:Eenheid ;
.
modelspec:Fase
  a sh:NodeShape ;
  rdfs:comment "Een periode als onderdeel van een langere ontwikkeling" ;
  rdfs:label "Fase"@nl ;
  sh:name "cspec:Fase" ;
  sh:property modelspec:FaseHeeftBetrekkingOp ;
  sh:property modelspec:bestaatUit ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:isLidVan ;
  sh:targetClass cspec:Fase ;
.
modelspec:FaseHeeftBetrekkingOp
  a sh:PropertyShape ;
  sh:path cspec:FaseHeeftBetrekkingOp ;
  rdfs:comment "" ;
  rdfs:label "fase heeft betrekking op"@nl ;
  sh:name "cspec:FaseHeeftBetrekkingOp" ;
  sh:or (
      [
        sh:class cspec:Activiteit ;
      ]
      [
        sh:class cspec:Collectie ;
      ]
      [
        sh:class cspec:Dataset ;
      ]
      [
        sh:class cspec:Eenheid ;
      ]
      [
        sh:class cspec:Fase ;
      ]
      [
        sh:class cspec:Functie ;
      ]
      [
        sh:class cspec:Methode ;
      ]
      [
        sh:class cspec:Object ;
      ]
      [
        sh:class cspec:Raakvlak ;
      ]
      [
        sh:class cspec:Specificatie ;
      ]
      [
        sh:class cspec:Specificatiecategorie ;
      ]
      [
        sh:class cspec:Status ;
      ]
    ) ;
.
modelspec:Functie
  a sh:NodeShape ;
  rdfs:comment "Een potentieel meetbare prestatie van een object / systeem" ;
  rdfs:label "Functie"@nl ;
  sh:name "cspec:Functie" ;
  sh:property modelspec:bestaatUit ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:isGespecificeerdDoor ;
  sh:property modelspec:isLidVan ;
  sh:property modelspec:wordtVervuldDoor ;
  sh:targetClass cspec:Functie ;
.
modelspec:ID
  a sh:PropertyShape ;
  sh:path cspec:ID ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:name "cspec:ID" ;
.
modelspec:Methode
  a sh:NodeShape ;
  rdfs:comment "Een vaste wel doordachte manier van handelen om een bepaald doel te bereiken" ;
  rdfs:label "Methode"@nl ;
  sh:name "cspec:Methode" ;
  sh:property modelspec:bestaatUit ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:isLidVan ;
  sh:property modelspec:isVerificatiemethodeVoor ;
  sh:targetClass cspec:Methode ;
.
modelspec:Object
  a sh:NodeShape ;
  rdfs:comment "Een door de mens geproduceerd of gerealiseerd voorwerp, constructie, bouwwerk" ;
  rdfs:label "Object"@nl ;
  sh:name "cspec:Object" ;
  sh:property modelspec:bestaatUit ;
  sh:property modelspec:bijActiviteitenWordtObjectGespecificeerdDoor ;
  sh:property modelspec:bijObjectWordtActiviteitGespecificeerdDoor ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:heeftVariant ;
  sh:property modelspec:isGespecificeerdDoor ;
  sh:property modelspec:isLidVan ;
  sh:property modelspec:isVariantVan ;
  sh:property modelspec:vervult ;
  sh:targetClass cspec:Object ;
.
modelspec:Raakvlak
  a sh:NodeShape ;
  rdfs:comment "Het punt of gebied dat twee objecten gemeen hebben" ;
  rdfs:label "Raakvlak"@nl ;
  sh:name "cspec:Raakvlak" ;
  sh:property modelspec:bestaatUit ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:isGespecificeerdDoor ;
  sh:property modelspec:isLidVan ;
  sh:targetClass cspec:Raakvlak ;
.
modelspec:Specificatie
  a sh:NodeShape ;
  rdfs:comment "Een nadere aanduiding waaraan een product moet voldoen" ;
  rdfs:label "Specificatie"@nl ;
  sh:name "cspec:Specificatie" ;
  sh:property modelspec:ID ;
  sh:property modelspec:combinatieWordtVereistDoor ;
  sh:property modelspec:combintatieWordtUitgeslotenDoor ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftEenheid ;
  sh:property modelspec:heeftOnderliggende ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:heeftVerificatiemethode ;
  sh:property modelspec:isLidVan ;
  sh:property modelspec:isOnderliggendeVan ;
  sh:property modelspec:isVanCategorie ;
  sh:property modelspec:sluitCombinatieUitMet ;
  sh:property modelspec:specificeert ;
  sh:property modelspec:specificeertActiviteitBijObject ;
  sh:property modelspec:specificeertObjectBijActiviteit ;
  sh:property modelspec:wordtInCombinatieVereistDoor ;
  sh:targetClass cspec:Specificatie ;
.
modelspec:Specificatiecategorie
  a sh:NodeShape ;
  rdfs:comment "Een categorie waar een specificatei toe kan behoren" ;
  rdfs:label "Specificatiecategorie"@nl ;
  sh:name "cspec:Specificatiecategorie" ;
  sh:property modelspec:bestaatUit ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:heeftStatus ;
  sh:property modelspec:heeftSubcategorie ;
  sh:property modelspec:isCategorieVoor ;
  sh:property modelspec:isLidVan ;
  sh:property modelspec:isSubcategorieVoor ;
  sh:targetClass cspec:Specificatiecategorie ;
.
modelspec:Status
  a sh:NodeShape ;
  rdfs:comment "De stand of toestand van iets" ;
  rdfs:label "Status"@nl ;
  sh:name "cspec:Status" ;
  sh:property modelspec:heeftBetrekkingOpFase ;
  sh:property modelspec:isStatusVan ;
  sh:targetClass cspec:Status ;
.
modelspec:URLVanDeDefinitie
  a sh:PropertyShape ;
  sh:path cspec:URLVanDeDefinitie ;
  rdfs:label "URL van de defintie"@nl ;
  sh:datatype sh:IRI ;
  sh:maxCount 1 ;
  sh:message "Een definitie mag maximaal één URL hebben" ;
  sh:name "cspec:URLVanDeDefinitie" ;
  sh:severity sh:Violation ;
.
modelspec:aanwijzingTekst
  a sh:PropertyShape ;
  sh:path cspec:aanwijzingTekst ;
  rdfs:label "Aanwijzing tekst"@nl ;
  sh:datatype xsd:string ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:maxCount 1 ;
  sh:message "Er mag maximaal één passage aanwijzings tekst worden opgenomen" ;
  sh:name "cspec:aanwijzingTekst" ;
  sh:severity sh:Violation ;
.
modelspec:beschrijving
  a sh:PropertyShape ;
  sh:path cspec:beschrijving ;
  rdfs:label "beschrijving"@nl ;
  sh:datatype xsd:string ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:maxCount 1 ;
  sh:message "Er mag maximaal één beschrijving worden opgenomen" ;
  sh:name "cspec:beschrijving" ;
  sh:severity sh:Violation ;
.
modelspec:bestaatUit
  a sh:PropertyShape ;
  sh:path cspec:bestaatUit ;
  rdfs:label "bestaat uit"@nl ;
  sh:name "cspec:bestaatUit" ;
  sh:or (
      [
        sh:class cspec:Activiteit ;
      ]
      [
        sh:class cspec:Collectie ;
      ]
      [
        sh:class cspec:Dataset ;
      ]
      [
        sh:class cspec:Eenheid ;
      ]
      [
        sh:class cspec:Fase ;
      ]
      [
        sh:class cspec:Functie ;
      ]
      [
        sh:class cspec:Methode ;
      ]
      [
        sh:class cspec:Object ;
      ]
      [
        sh:class cspec:Raakvlak ;
      ]
      [
        sh:class cspec:Specificatie ;
      ]
      [
        sh:class cspec:Specificatiecategorie ;
      ]
      [
        sh:class cspec:Status ;
      ]
    ) ;
.
modelspec:bijActiviteitenWordtObjectGespecificeerdDoor
  a sh:PropertyShape ;
  sh:path cspec:bijActiviteitenWordtObjectGespecificeerdDoor ;
  rdfs:label "bij activiteit wordt object gespecificeerd door"@nl ;
  sh:class cspec:Specificatie ;
  sh:maxCount 1 ;
  sh:message "Er mag maar één object ingevoerd worden" ;
  sh:name "cspec:bijActiviteitenWordtObjectGespecificeerdDoor" ;
  sh:severity sh:Violation ;
.
modelspec:bijObjectWordtActiviteitGespecificeerdDoor
  a sh:PropertyShape ;
  sh:path cspec:bijActiviteitenWordtObjectGespecificeerdDoor ;
  rdfs:label "bij object wordt activiteit gespecificeerd door"@nl ;
  sh:class cspec:Specificatie ;
  sh:maxCount 1 ;
  sh:message "Er mag maar één activiteit ingevoerd worden" ;
  sh:name "cspec:bijActiviteitenWordtObjectGespecificeerdDoor" ;
  sh:severity sh:Violation ;
.
modelspec:bronVanDefinitie
  a sh:PropertyShape ;
  sh:path cspec:bronVanDefinitie ;
  rdfs:label "bron van definitie"@nl ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:maxCount 1 ;
  sh:message "Er mag maximaal één bron worden opgenomen voor een definitie" ;
  sh:name "cspec:bronVanDefinitie" ;
  sh:severity sh:Violation ;
.
modelspec:combinatieWordtVereistDoor
  a sh:PropertyShape ;
  sh:path cspec:combinatieWordtVereistDoor ;
  rdfs:label "Deze relatie wordt gelegd tussen twee specificaties, waarbij de ene specificatie uitgesloten wordt door de andere specificatie."@nl ;
  sh:class cspec:Specificatie ;
  sh:maxCount 1 ;
  sh:message "Er mag maar naar één specificatie verwezen worden" ;
  sh:name "cspec:combinatieWordtVereistDoor" ;
  sh:severity sh:Violation ;
.
modelspec:combintatieWordtUitgeslotenDoor
  a sh:PropertyShape ;
  sh:path cspec:combintatieWordtUitgeslotenDoor ;
  rdfs:label "Deze relatie wordt gelegd tussen twee specificaties, waarbij de ene specificatie uitgesloten wordt door de andere specificatie."@nl ;
  sh:class cspec:Specificatie ;
  sh:maxCount 1 ;
  sh:message "Er mag maar naar één specificatie verwezen worden" ;
  sh:name "cspec:combintatieWordtUitgeslotenDoor" ;
  sh:severity sh:Violation ;
.
modelspec:definitie
  a sh:PropertyShape ;
  sh:path cspec:defintie ;
  rdfs:label "definitie" ;
  sh:datatype xsd:string ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:maxCount 1 ;
  sh:message "Er mag maximaal één definitie worden opgenomen" ;
  sh:name "cspec:definitie" ;
  sh:severity sh:Violation ;
.
modelspec:heeftBetrekkingOpFase
  a sh:PropertyShape ;
  sh:path cspec:heeftBetrekkingOpFase ;
  rdfs:label "heeft betrekking op fase"@nl ;
  sh:class cspec:Fase ;
  sh:name "cspec:heeftBetrekkingOpFase" ;
.
modelspec:heeftEenheid
  a sh:PropertyShape ;
  sh:path cspec:heeftEenheid ;
  rdfs:label "heeft eenheid"@nl ;
  sh:class cspec:Eenheid ;
  sh:maxCount 1 ;
  sh:message "Er mag maar naar één eenheid verwezen worden" ;
  sh:name "cspec:heeftEenheid" ;
  sh:severity sh:Violation ;
.
modelspec:heeftLid
  a sh:PropertyShape ;
  sh:path cspec:heeftLid ;
  rdfs:label "heeft lid"@nl ;
  sh:name "cspec:heeftLid" ;
  sh:or (
      [
        sh:class cspec:Activiteit ;
      ]
      [
        sh:class cspec:Collectie ;
      ]
      [
        sh:class cspec:Dataset ;
      ]
      [
        sh:class cspec:Eenheid ;
      ]
      [
        sh:class cspec:Fase ;
      ]
      [
        sh:class cspec:Functie ;
      ]
      [
        sh:class cspec:Methode ;
      ]
      [
        sh:class cspec:Object ;
      ]
      [
        sh:class cspec:Raakvlak ;
      ]
      [
        sh:class cspec:Specificatie ;
      ]
      [
        sh:class cspec:Specificatiecategorie ;
      ]
    ) ;
.
modelspec:heeftOnderliggende
  a sh:PropertyShape ;
  sh:path cspec:heeftOnderliggende ;
  rdfs:label "heeft onderliggende"@nl ;
  sh:class cspec:Specificatie ;
  sh:name "cspec:heeftOnderliggende" ;
.
modelspec:heeftStatus
  a sh:PropertyShape ;
  sh:path cspec:heeftStatus ;
  rdfs:label "heeft status" ;
  sh:class cspec:Status ;
  sh:message "Er dient een status te worden meegegeven" ;
  sh:name "cspec:heeftStatus" ;
  sh:severity sh:Violation ;
.
modelspec:heeftSubcategorie
  a sh:PropertyShape ;
  sh:path cspec:heeftSubcategorie ;
  rdfs:label "heeft subcategorie"@nl ;
  sh:class cspec:Specificatiecategorie ;
  sh:name "cspec:heeftSubcategorie" ;
.
modelspec:heeftVariant
  a sh:PropertyShape ;
  sh:path cspec:heeftVariant ;
  rdfs:label "heeft variant"@nl ;
  sh:class cspec:Object ;
  sh:name "cspec:heeftVariant" ;
.
modelspec:heeftVerificatiemethode
  a sh:PropertyShape ;
  sh:path cspec:heeftVerificatiemethode ;
  rdfs:label "heeft verificatiemethode"@nl ;
  sh:class cspec:Methode ;
  sh:name "cspec:heeftVerificatiemethode" ;
.
modelspec:hoortBijDataset
  a sh:PropertyShape ;
  sh:path cspec:hoortBijDataset ;
  rdfs:label "hoort bij dataset"@nl ;
  sh:class cspec:Dataset ;
  sh:message "Er dient een verwijzing naar minimaal één dataset te worden opgenomen" ;
  sh:minCount 1 ;
  sh:name "cspec:hoortBijDataset" ;
  sh:severity sh:Violation ;
.
modelspec:inhoudMethode
  a sh:PropertyShape ;
  sh:path cspec:inhoudMethode ;
  rdfs:label "inhoud methode"@nl ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:maxCount 1 ;
  sh:message "Er mag maximaal één verwijzing worden opgenomen naar een inhoud van een Methode" ;
  sh:name "cspec:inhoudMethode" ;
  sh:severity sh:Violation ;
.
modelspec:isCategorieVoor
  a sh:PropertyShape ;
  sh:path cspec:isCategorieVoor ;
  rdfs:label "is categorie voor"@nl ;
  sh:class cspec:Specificatie ;
  sh:name "cspec:isCategorieVoor" ;
.
modelspec:isDatasetVoor
  a sh:PropertyShape ;
  sh:path cspec:isDatasetVoor ;
  rdfs:label "is dataset voor"@nl ;
  sh:minCount 1 ;
  sh:name "cspec:isDatasetVoor" ;
  sh:severity sh:Violation ;
.
modelspec:isEenheidVoor
  a sh:PropertyShape ;
  sh:path cspec:isEenheidVoor ;
  rdfs:label "is eenheid voor"@nl ;
  sh:class cspec:Specificatie ;
  sh:minCount 1 ;
  sh:name "cspec:isEenheidVoor" ;
  sh:severity sh:Violation ;
.
modelspec:isGespecificeerdDoor
  a sh:PropertyShape ;
  sh:path cspec:isGespecificeerdDoor ;
  rdfs:label "is gespecificeerd door"@nl ;
  sh:class cspec:Specificatie ;
  sh:name "cspec:isGespecificeerdDoor" ;
.
modelspec:isLidVan
  a sh:PropertyShape ;
  sh:path cspec:isLidVan ;
  rdfs:label "is lid van"@nl ;
  sh:class cspec:Collectie ;
  sh:name "cspec:isLidVan" ;
.
modelspec:isOnderdeelVan
  a sh:PropertyShape ;
  sh:path cspec:isOnderdeelVan ;
  rdfs:label "is onderdeel van"@nl ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:maxCount 1 ;
  sh:message "Er mag maximaal één verwijzing naar een Activiteit, Collectie, Dataset, Eenheid, Fase, Functie, Methode, Object, Raakvlak, Specificatie of Specificatiecategorie aanwezig zijn" ;
  sh:name "cspec:isOnderdeelVan" ;
  sh:or (
      [
        sh:class cspec:Activiteit ;
      ]
      [
        sh:class cspec:Collectie ;
      ]
      [
        sh:class cspec:Dataset ;
      ]
      [
        sh:class cspec:Eenheid ;
      ]
      [
        sh:class cspec:Fase ;
      ]
      [
        sh:class cspec:Functie ;
      ]
      [
        sh:class cspec:Methode ;
      ]
      [
        sh:class cspec:Object ;
      ]
      [
        sh:class cspec:Raakvlak ;
      ]
      [
        sh:class cspec:Specificatie ;
      ]
      [
        sh:class cspec:Specificatiecategorie ;
      ]
    ) ;
  sh:severity sh:Violation ;
.
modelspec:isOnderliggendeVan
  a sh:PropertyShape ;
  sh:path cspec:isOnderliggendeVan ;
  rdfs:label "is onderliggende van"@nl ;
  sh:class cspec:Specificatie ;
  sh:maxCount 1 ;
  sh:message "Er mag maximaal één verwijzing naar Specificatie worden opgenomen" ;
  sh:name "cspec:isOnderliggendeVan" ;
  sh:severity sh:Violation ;
.
modelspec:isStatusVan
  a sh:PropertyShape ;
  sh:path cspec:isStatusVan ;
  rdfs:label "is status van"@nl ;
  sh:message "Er dient een status te worden ingevoerd" ;
  sh:minCount 1 ;
  sh:name "cspec:isStatusVan" ;
  sh:or (
      [
        sh:class cspec:Activiteit ;
      ]
      [
        sh:class cspec:Collectie ;
      ]
      [
        sh:class cspec:Dataset ;
      ]
      [
        sh:class cspec:Eenheid ;
      ]
      [
        sh:class cspec:Fase ;
      ]
      [
        sh:class cspec:Functie ;
      ]
      [
        sh:class cspec:Methode ;
      ]
      [
        sh:class cspec:Object ;
      ]
      [
        sh:class cspec:Raakvlak ;
      ]
      [
        sh:class cspec:Specificatie ;
      ]
      [
        sh:class cspec:Specificatiecategorie ;
      ]
    ) ;
  sh:severity sh:Violation ;
.
modelspec:isSubcategorieVoor
  a sh:PropertyShape ;
  sh:path cspec:isSubcategorieVoor ;
  rdfs:label "is subcategorie voor"@nl ;
  sh:class cspec:Specificatiecategorie ;
  sh:message "Er dient minimaal één verwijzing naar een Specificatiecategorie aanwezig te zijn" ;
  sh:name "cspec:isSubcategorieVoor" ;
  sh:severity sh:Violation ;
.
modelspec:isVanCategorie
  a sh:PropertyShape ;
  sh:path cspec:isVanCategorie ;
  rdfs:label "is van categorie"@nl ;
  sh:class cspec:Specificatiecategorie ;
  sh:name "cspec:isVanCategorie" ;
.
modelspec:isVariantVan
  a sh:PropertyShape ;
  sh:path cspec:isVariantVan ;
  rdfs:label "is variant van"@nl ;
  sh:class cspec:Object ;
  sh:maxCount 1 ;
  sh:message "Er dient één verwijzing te worden opgenomen naar een Object" ;
  sh:name "cspec:isVariantVan" ;
  sh:severity sh:Violation ;
.
modelspec:isVerificatiemethodeVoor
  a sh:PropertyShape ;
  sh:path cspec:isVerificatiemethodeVoor ;
  rdfs:label "is verificatiemethode voor"@nl ;
  sh:class cspec:Specificatie ;
  sh:message "Er dient minimaal één verwijzing te zijn opgenomen naar een Specificatie" ;
  sh:minCount 1 ;
  sh:name "cspec:isVerificatiemethodeVoor" ;
  sh:severity sh:Violation ;
.
modelspec:naam
  a sh:PropertyShape ;
  sh:path cspec:naam ;
  rdfs:label "naam"@nl ;
  sh:datatype xsd:string ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:maxCount 2 ;
  sh:message "Er mag maximaal één naam voor dit element worden opgevoerd" ;
  sh:name "cspec:naam" ;
  sh:severity sh:Violation ;
.
modelspec:sluitCombinatieUitMet
  a sh:PropertyShape ;
  sh:path cspec:sluitCombinatieUitMet ;
  rdfs:label "sluit combinatie uit met"@nl ;
  sh:class cspec:Specificatie ;
  sh:name "cspec:sluitCombinatieUitMet" ;
.
modelspec:specificeert
  a sh:PropertyShape ;
  sh:path cspec:specificeert ;
  rdfs:label "specificeert"@nl ;
  sh:class cspec:Activiteit ;
  sh:message "Er dient één verwijzing naar een Activiteit, Functie, Object of Raakvlak te zijn ingevoerd" ;
  sh:minCount 1 ;
  sh:name "cspec:specificeert" ;
  sh:severity sh:Violation ;
.
modelspec:specificeertActiviteitBijObject
  a sh:PropertyShape ;
  sh:path cspec:specificeertActiviteitBijObject ;
  rdfs:label "specificeert activiteit bij object"@nl ;
  sh:class cspec:Object ;
  sh:maxCount 1 ;
  sh:message "Er mag maar één verwijzing naar een Object worden opgenomen" ;
  sh:name "cspec:specificeertActiviteitBijObject" ;
  sh:severity sh:Violation ;
.
modelspec:specificeertObjectBijActiviteit
  a sh:PropertyShape ;
  sh:path cspec:specificeertObjectBijActiviteit ;
  rdfs:label "specificeert object bij activiteit"@nl ;
  sh:class cspec:Activiteit ;
  sh:maxCount 1 ;
  sh:message "Er mag maar één verwijzing naar een Activiteit worden opgenomen" ;
  sh:name "cspec:specificeertObjectBijActiviteit" ;
  sh:severity sh:Violation ;
.
modelspec:synoniem
  a sh:PropertyShape ;
  sh:path cspec:synoniem ;
  rdfs:label "synoniem"@nl ;
  sh:datatype sh:literal ;
  sh:in (
      cspec:Activiteit
      cspec:Collectie
      cspec:Dataset
      cspec:Eenheid
      cspec:Fase
      cspec:Functie
      cspec:Methode
      cspec:Object
      cspec:Raakvlak
      cspec:Specificatie
      cspec:Specificatiecategorie
    ) ;
  sh:name "cspec:synoniem" ;
.
modelspec:vervult
  a sh:PropertyShape ;
  sh:path cspec:vervult ;
  rdfs:label "vervult"@nl ;
  sh:class cspec:Functie ;
  sh:maxCount 1 ;
  sh:message "Er mag maar één verwijzing naar een Functie worden opgenomen" ;
  sh:name "cspec:vervult" ;
  sh:severity sh:Violation ;
.
modelspec:wordtInCombinatieVereistDoor
  a sh:PropertyShape ;
  sh:path cspec:wordtInCombinatieVereistDoor ;
  rdfs:comment "Deze relatie wordt gelegd tussen twee specificaties, waarbij de ene specificatie niet geldt zonder de andere specificatie"@nl ;
  rdfs:label "wordt in combinatie vereist door"@nl ;
  sh:class cspec:Specificatie ;
  sh:maxCount 1 ;
  sh:message "Er mag maar één verwijzing naar een Specificatie worden opgenomen" ;
  sh:name "cspec:wordtInCombinatieVereistDoor" ;
  sh:severity sh:Violation ;
.
modelspec:wordtVervuldDoor
  a sh:PropertyShape ;
  sh:path cspec:wordtVervuldDoor ;
  rdfs:label "wordt vervuld door"@nl ;
  sh:class cspec:Activiteit ;
  sh:class cspec:Object ;
  sh:name "cspec:wordtVervuldDoor" ;
.
sh:
  rdfs:comment "This vocabulary defines terms used in SHACL, the W3C Shapes Constraint Language."@en ;
  rdfs:label "W3C Shapes Constraint Language (SHACL) Vocabulary"@en ;
  sh:declare [
      sh:namespace "http://www.w3.org/ns/shacl#" ;
      sh:prefix "sh" ;
    ] ;
  sh:suggestedShapesGraph <http://www.w3.org/ns/shacl-shacl#> ;
.
sh:AbstractResult
  a rdfs:Class ;
  rdfs:comment "The base class of validation results, typically not instantiated directly."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Abstract result"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:AndConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to test whether a value node conforms to all members of a provided list of shapes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "And constraint component"@en ;
  sh:parameter sh:AndConstraintComponent-and ;
.
sh:AndConstraintComponent-and
  a sh:Parameter ;
  sh:path sh:and ;
  rdfs:isDefinedBy sh: ;
.
sh:BlankNode
  a sh:NodeKind ;
  rdfs:comment "The node kind of all blank nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Blank node"@en ;
.
sh:BlankNodeOrIRI
  a sh:NodeKind ;
  rdfs:comment "The node kind of all blank nodes or IRIs."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Blank node or IRI"@en ;
.
sh:BlankNodeOrLiteral
  a sh:NodeKind ;
  rdfs:comment "The node kind of all blank nodes or literals."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Blank node or literal"@en ;
.
sh:ClassConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that each value node is an instance of a given type."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Class constraint component"@en ;
  sh:parameter sh:ClassConstraintComponent-class ;
.
sh:ClassConstraintComponent-class
  a sh:Parameter ;
  sh:path sh:class ;
  rdfs:isDefinedBy sh: ;
  sh:nodeKind sh:IRI ;
.
sh:ClosedConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to indicate that focus nodes must only have values for those properties that have been explicitly enumerated via sh:property/sh:path."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Closed constraint component"@en ;
  sh:parameter sh:ClosedConstraintComponent-closed ;
  sh:parameter sh:ClosedConstraintComponent-ignoredProperties ;
.
sh:ClosedConstraintComponent-closed
  a sh:Parameter ;
  sh:path sh:closed ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:boolean ;
.
sh:ClosedConstraintComponent-ignoredProperties
  a sh:Parameter ;
  sh:path sh:ignoredProperties ;
  rdfs:isDefinedBy sh: ;
  sh:optional true ;
.
sh:ConstraintComponent
  a rdfs:Class ;
  rdfs:comment "The class of constraint components."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Constraint component"@en ;
  rdfs:subClassOf sh:Parameterizable ;
.
sh:DatatypeConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the datatype of all value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Datatype constraint component"@en ;
  sh:parameter sh:DatatypeConstraintComponent-datatype ;
.
sh:DatatypeConstraintComponent-datatype
  a sh:Parameter ;
  sh:path sh:datatype ;
  rdfs:isDefinedBy sh: ;
  sh:maxCount 1 ;
  sh:nodeKind sh:IRI ;
.
sh:DisjointConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that the set of value nodes is disjoint with the the set of nodes that have the focus node as subject and the value of a given property as predicate."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Disjoint constraint component"@en ;
  sh:parameter sh:DisjointConstraintComponent-disjoint ;
.
sh:DisjointConstraintComponent-disjoint
  a sh:Parameter ;
  sh:path sh:disjoint ;
  rdfs:isDefinedBy sh: ;
  sh:nodeKind sh:IRI ;
.
sh:EqualsConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that the set of value nodes is equal to the set of nodes that have the focus node as subject and the value of a given property as predicate."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Equals constraint component"@en ;
  sh:parameter sh:EqualsConstraintComponent-equals ;
.
sh:EqualsConstraintComponent-equals
  a sh:Parameter ;
  sh:path sh:equals ;
  rdfs:isDefinedBy sh: ;
  sh:nodeKind sh:IRI ;
.
sh:ExpressionConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that a given node expression produces true for all value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Expression constraint component"@en ;
  sh:parameter sh:ExpressionConstraintComponent-expression ;
.
sh:ExpressionConstraintComponent-expression
  a sh:Parameter ;
  sh:path sh:expression ;
  rdfs:isDefinedBy sh: ;
.
sh:Function
  a rdfs:Class ;
  rdfs:comment "The class of SHACL functions."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Function"@en ;
  rdfs:subClassOf sh:Parameterizable ;
.
sh:HasValueConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that one of the value nodes is a given RDF node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Has-value constraint component"@en ;
  sh:parameter sh:HasValueConstraintComponent-hasValue ;
.
sh:HasValueConstraintComponent-hasValue
  a sh:Parameter ;
  sh:path sh:hasValue ;
  rdfs:isDefinedBy sh: ;
.
sh:IRI
  a sh:NodeKind ;
  rdfs:comment "The node kind of all IRIs."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "IRI"@en ;
.
sh:IRIOrLiteral
  a sh:NodeKind ;
  rdfs:comment "The node kind of all IRIs or literals."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "IRI or literal"@en ;
.
sh:InConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to exclusively enumerate the permitted value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "In constraint component"@en ;
  sh:parameter sh:InConstraintComponent-in ;
.
sh:InConstraintComponent-in
  a sh:Parameter ;
  sh:path sh:in ;
  rdfs:isDefinedBy sh: ;
  sh:maxCount 1 ;
.
sh:Info
  a sh:Severity ;
  rdfs:comment "The severity for an informational validation result."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Info"@en ;
.
sh:JSConstraint
  a rdfs:Class ;
  rdfs:comment "The class of constraints backed by a JavaScript function."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript-based constraint"@en ;
  rdfs:subClassOf sh:JSExecutable ;
.
sh:JSConstraint-js
  a sh:Parameter ;
  sh:path sh:js ;
  rdfs:isDefinedBy sh: ;
.
sh:JSConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component with the parameter sh:js linking to a sh:JSConstraint containing a sh:script."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript constraint component"@en ;
  sh:parameter sh:JSConstraint-js ;
.
sh:JSExecutable
  a rdfs:Class ;
  rdfs:comment "Abstract base class of resources that declare an executable JavaScript."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript executable"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:JSFunction
  a rdfs:Class ;
  rdfs:comment "The class of SHACL functions that execute a JavaScript function when called."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript function"@en ;
  rdfs:subClassOf sh:Function ;
  rdfs:subClassOf sh:JSExecutable ;
.
sh:JSLibrary
  a rdfs:Class ;
  rdfs:comment "Represents a JavaScript library, typically identified by one or more URLs of files to include."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript library"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:JSRule
  a rdfs:Class ;
  rdfs:comment "The class of SHACL rules expressed using JavaScript."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript rule"@en ;
  rdfs:subClassOf sh:JSExecutable ;
  rdfs:subClassOf sh:Rule ;
.
sh:JSTarget
  a rdfs:Class ;
  rdfs:comment "The class of targets that are based on JavaScript functions."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript target"@en ;
  rdfs:subClassOf sh:JSExecutable ;
  rdfs:subClassOf sh:Target ;
.
sh:JSTargetType
  a rdfs:Class ;
  rdfs:comment "The (meta) class for parameterizable targets that are based on JavaScript functions."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript target type"@en ;
  rdfs:subClassOf sh:JSExecutable ;
  rdfs:subClassOf sh:TargetType ;
.
sh:JSValidator
  a rdfs:Class ;
  rdfs:comment "A SHACL validator based on JavaScript. This can be used to declare SHACL constraint components that perform JavaScript-based validation when used."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript validator"@en ;
  rdfs:subClassOf sh:JSExecutable ;
  rdfs:subClassOf sh:Validator ;
.
sh:LanguageInConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to enumerate language tags that all value nodes must have."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Language-in constraint component"@en ;
  sh:parameter sh:LanguageInConstraintComponent-languageIn ;
.
sh:LanguageInConstraintComponent-languageIn
  a sh:Parameter ;
  sh:path sh:languageIn ;
  rdfs:isDefinedBy sh: ;
  sh:maxCount 1 ;
.
sh:LessThanConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that each value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Less-than constraint component"@en ;
  sh:parameter sh:LessThanConstraintComponent-lessThan ;
.
sh:LessThanConstraintComponent-lessThan
  a sh:Parameter ;
  sh:path sh:lessThan ;
  rdfs:isDefinedBy sh: ;
  sh:nodeKind sh:IRI ;
.
sh:LessThanOrEqualsConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that every value node is smaller than all the nodes that have the focus node as subject and the value of a given property as predicate."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "less-than-or-equals constraint component"@en ;
  sh:parameter sh:LessThanOrEqualsConstraintComponent-lessThanOrEquals ;
.
sh:LessThanOrEqualsConstraintComponent-lessThanOrEquals
  a sh:Parameter ;
  sh:path sh:lessThanOrEquals ;
  rdfs:isDefinedBy sh: ;
  sh:nodeKind sh:IRI ;
.
sh:Literal
  a sh:NodeKind ;
  rdfs:comment "The node kind of all literals."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Literal"@en ;
.
sh:MaxCountConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the maximum number of value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Max-count constraint component"@en ;
  sh:parameter sh:MaxCountConstraintComponent-maxCount ;
.
sh:MaxCountConstraintComponent-maxCount
  a sh:Parameter ;
  sh:path sh:maxCount ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
.
sh:MaxExclusiveConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the range of value nodes with a maximum exclusive value."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Max-exclusive constraint component"@en ;
  sh:parameter sh:MaxExclusiveConstraintComponent-maxExclusive ;
.
sh:MaxExclusiveConstraintComponent-maxExclusive
  a sh:Parameter ;
  sh:path sh:maxExclusive ;
  rdfs:isDefinedBy sh: ;
  sh:maxCount 1 ;
  sh:nodeKind sh:Literal ;
.
sh:MaxInclusiveConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the range of value nodes with a maximum inclusive value."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Max-inclusive constraint component"@en ;
  sh:parameter sh:MaxInclusiveConstraintComponent-maxInclusive ;
.
sh:MaxInclusiveConstraintComponent-maxInclusive
  a sh:Parameter ;
  sh:path sh:maxInclusive ;
  rdfs:isDefinedBy sh: ;
  sh:maxCount 1 ;
  sh:nodeKind sh:Literal ;
.
sh:MaxLengthConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the maximum string length of value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Max-length constraint component"@en ;
  sh:parameter sh:MaxLengthConstraintComponent-maxLength ;
.
sh:MaxLengthConstraintComponent-maxLength
  a sh:Parameter ;
  sh:path sh:maxLength ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
.
sh:MinCountConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the minimum number of value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Min-count constraint component"@en ;
  sh:parameter sh:MinCountConstraintComponent-minCount ;
.
sh:MinCountConstraintComponent-minCount
  a sh:Parameter ;
  sh:path sh:minCount ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
.
sh:MinExclusiveConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the range of value nodes with a minimum exclusive value."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Min-exclusive constraint component"@en ;
  sh:parameter sh:MinExclusiveConstraintComponent-minExclusive ;
.
sh:MinExclusiveConstraintComponent-minExclusive
  a sh:Parameter ;
  sh:path sh:minExclusive ;
  rdfs:isDefinedBy sh: ;
  sh:maxCount 1 ;
  sh:nodeKind sh:Literal ;
.
sh:MinInclusiveConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the range of value nodes with a minimum inclusive value."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Min-inclusive constraint component"@en ;
  sh:parameter sh:MinInclusiveConstraintComponent-minInclusive ;
.
sh:MinInclusiveConstraintComponent-minInclusive
  a sh:Parameter ;
  sh:path sh:minInclusive ;
  rdfs:isDefinedBy sh: ;
  sh:maxCount 1 ;
  sh:nodeKind sh:Literal ;
.
sh:MinLengthConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the minimum string length of value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Min-length constraint component"@en ;
  sh:parameter sh:MinLengthConstraintComponent-minLength ;
.
sh:MinLengthConstraintComponent-minLength
  a sh:Parameter ;
  sh:path sh:minLength ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:integer ;
  sh:maxCount 1 ;
.
sh:NodeConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that all value nodes conform to the given node shape."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Node constraint component"@en ;
  sh:parameter sh:NodeConstraintComponent-node ;
.
sh:NodeConstraintComponent-node
  a sh:Parameter ;
  sh:path sh:node ;
  rdfs:isDefinedBy sh: ;
.
sh:NodeKind
  a rdfs:Class ;
  rdfs:comment "The class of all node kinds, including sh:BlankNode, sh:IRI, sh:Literal or the combinations of these: sh:BlankNodeOrIRI, sh:BlankNodeOrLiteral, sh:IRIOrLiteral."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Node kind"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:NodeKindConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the RDF node kind of each value node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Node-kind constraint component"@en ;
  sh:parameter sh:NodeKindConstraintComponent-nodeKind ;
.
sh:NodeKindConstraintComponent-nodeKind
  a sh:Parameter ;
  sh:path sh:nodeKind ;
  rdfs:isDefinedBy sh: ;
  sh:in (
      sh:BlankNode
      sh:IRI
      sh:Literal
      sh:BlankNodeOrIRI
      sh:BlankNodeOrLiteral
      sh:IRIOrLiteral
    ) ;
  sh:maxCount 1 ;
.
sh:NodeShape
  a rdfs:Class ;
  rdfs:comment "A node shape is a shape that specifies constraint that need to be met with respect to focus nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Node shape"@en ;
  rdfs:subClassOf sh:Shape ;
.
sh:NotConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that value nodes do not conform to a given shape."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Not constraint component"@en ;
  sh:parameter sh:NotConstraintComponent-not ;
.
sh:NotConstraintComponent-not
  a sh:Parameter ;
  sh:path sh:not ;
  rdfs:isDefinedBy sh: ;
.
sh:OrConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the value nodes so that they conform to at least one out of several provided shapes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Or constraint component"@en ;
  sh:parameter sh:OrConstraintComponent-or ;
.
sh:OrConstraintComponent-or
  a sh:Parameter ;
  sh:path sh:or ;
  rdfs:isDefinedBy sh: ;
.
sh:Parameter
  a rdfs:Class ;
  rdfs:comment "The class of parameter declarations, consisting of a path predicate and (possibly) information about allowed value type, cardinality and other characteristics."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Parameter"@en ;
  rdfs:subClassOf sh:PropertyShape ;
.
sh:Parameterizable
  a rdfs:Class ;
  rdfs:comment "Superclass of components that can take parameters, especially functions and constraint components."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Parameterizable"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:PatternConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that every value node matches a given regular expression."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Pattern constraint component"@en ;
  sh:parameter sh:PatternConstraintComponent-flags ;
  sh:parameter sh:PatternConstraintComponent-pattern ;
.
sh:PatternConstraintComponent-flags
  a sh:Parameter ;
  sh:path sh:flags ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:string ;
  sh:optional true ;
.
sh:PatternConstraintComponent-pattern
  a sh:Parameter ;
  sh:path sh:pattern ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:string ;
.
sh:PrefixDeclaration
  a rdfs:Class ;
  rdfs:comment "The class of prefix declarations, consisting of pairs of a prefix with a namespace."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Prefix declaration"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:PropertyConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that all value nodes conform to the given property shape."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Property constraint component"@en ;
  sh:parameter sh:PropertyConstraintComponent-property ;
.
sh:PropertyConstraintComponent-property
  a sh:Parameter ;
  sh:path sh:property ;
  rdfs:isDefinedBy sh: ;
.
sh:PropertyGroup
  a rdfs:Class ;
  rdfs:comment "Instances of this class represent groups of property shapes that belong together."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Property group"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:PropertyShape
  a rdfs:Class ;
  rdfs:comment "A property shape is a shape that specifies constraints on the values of a focus node for a given property or path."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Property shape"@en ;
  rdfs:subClassOf sh:Shape ;
.
sh:QualifiedMaxCountConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that a specified maximum number of value nodes conforms to a given shape."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Qualified-max-count constraint component"@en ;
  sh:parameter sh:QualifiedMaxCountConstraintComponent-qualifiedMaxCount ;
  sh:parameter sh:QualifiedMaxCountConstraintComponent-qualifiedValueShape ;
  sh:parameter sh:QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint ;
.
sh:QualifiedMaxCountConstraintComponent-qualifiedMaxCount
  a sh:Parameter ;
  sh:path sh:qualifiedMaxCount ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:integer ;
.
sh:QualifiedMaxCountConstraintComponent-qualifiedValueShape
  a sh:Parameter ;
  sh:path sh:qualifiedValueShape ;
  rdfs:isDefinedBy sh: ;
.
sh:QualifiedMaxCountConstraintComponent-qualifiedValueShapesDisjoint
  a sh:Parameter ;
  sh:path sh:qualifiedValueShapesDisjoint ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:boolean ;
  sh:optional true ;
.
sh:QualifiedMinCountConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to verify that a specified minimum number of value nodes conforms to a given shape."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Qualified-min-count constraint component"@en ;
  sh:parameter sh:QualifiedMinCountConstraintComponent-qualifiedMinCount ;
  sh:parameter sh:QualifiedMinCountConstraintComponent-qualifiedValueShape ;
  sh:parameter sh:QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint ;
.
sh:QualifiedMinCountConstraintComponent-qualifiedMinCount
  a sh:Parameter ;
  sh:path sh:qualifiedMinCount ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:integer ;
.
sh:QualifiedMinCountConstraintComponent-qualifiedValueShape
  a sh:Parameter ;
  sh:path sh:qualifiedValueShape ;
  rdfs:isDefinedBy sh: ;
.
sh:QualifiedMinCountConstraintComponent-qualifiedValueShapesDisjoint
  a sh:Parameter ;
  sh:path sh:qualifiedValueShapesDisjoint ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:boolean ;
  sh:optional true ;
.
sh:ResultAnnotation
  a rdfs:Class ;
  rdfs:comment "A class of result annotations, which define the rules to derive the values of a given annotation property as extra values for a validation result."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Result annotation"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:Rule
  a rdfs:Class ;
  rdfs:comment "The class of SHACL rules. Never instantiated directly."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Rule"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:SPARQLAskExecutable
  a rdfs:Class ;
  rdfs:comment "The class of SPARQL executables that are based on an ASK query."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL ASK executable"@en ;
  rdfs:subClassOf sh:SPARQLExecutable ;
.
sh:SPARQLAskValidator
  a rdfs:Class ;
  rdfs:comment "The class of validators based on SPARQL ASK queries. The queries are evaluated for each value node and are supposed to return true if the given node conforms."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL ASK validator"@en ;
  rdfs:subClassOf sh:SPARQLAskExecutable ;
  rdfs:subClassOf sh:Validator ;
.
sh:SPARQLConstraint
  a rdfs:Class ;
  rdfs:comment "The class of constraints based on SPARQL SELECT queries."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL constraint"@en ;
  rdfs:subClassOf sh:SPARQLSelectExecutable ;
.
sh:SPARQLConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to define constraints based on SPARQL queries."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL constraint component"@en ;
  sh:parameter sh:SPARQLConstraintComponent-sparql ;
.
sh:SPARQLConstraintComponent-sparql
  a sh:Parameter ;
  sh:path sh:sparql ;
  rdfs:isDefinedBy sh: ;
.
sh:SPARQLConstructExecutable
  a rdfs:Class ;
  rdfs:comment "The class of SPARQL executables that are based on a CONSTRUCT query."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL CONSTRUCT executable"@en ;
  rdfs:subClassOf sh:SPARQLExecutable ;
.
sh:SPARQLExecutable
  a rdfs:Class ;
  rdfs:comment "The class of resources that encapsulate a SPARQL query."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL executable"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:SPARQLFunction
  a rdfs:Class ;
  rdfs:comment "A function backed by a SPARQL query - either ASK or SELECT."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL function"@en ;
  rdfs:subClassOf sh:Function ;
  rdfs:subClassOf sh:SPARQLAskExecutable ;
  rdfs:subClassOf sh:SPARQLSelectExecutable ;
.
sh:SPARQLRule
  a rdfs:Class ;
  rdfs:comment "The class of SHACL rules based on SPARQL CONSTRUCT queries."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL CONSTRUCT rule"@en ;
  rdfs:subClassOf sh:Rule ;
  rdfs:subClassOf sh:SPARQLConstructExecutable ;
.
sh:SPARQLSelectExecutable
  a rdfs:Class ;
  rdfs:comment "The class of SPARQL executables based on a SELECT query."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL SELECT executable"@en ;
  rdfs:subClassOf sh:SPARQLExecutable ;
.
sh:SPARQLSelectValidator
  a rdfs:Class ;
  rdfs:comment "The class of validators based on SPARQL SELECT queries. The queries are evaluated for each focus node and are supposed to produce bindings for all focus nodes that do not conform."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL SELECT validator"@en ;
  rdfs:subClassOf sh:SPARQLSelectExecutable ;
  rdfs:subClassOf sh:Validator ;
.
sh:SPARQLTarget
  a rdfs:Class ;
  rdfs:comment "The class of targets that are based on SPARQL queries."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL target"@en ;
  rdfs:subClassOf sh:SPARQLAskExecutable ;
  rdfs:subClassOf sh:SPARQLSelectExecutable ;
  rdfs:subClassOf sh:Target ;
.
sh:SPARQLTargetType
  a rdfs:Class ;
  rdfs:comment "The (meta) class for parameterizable targets that are based on SPARQL queries."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL target type"@en ;
  rdfs:subClassOf sh:SPARQLAskExecutable ;
  rdfs:subClassOf sh:SPARQLSelectExecutable ;
  rdfs:subClassOf sh:TargetType ;
.
sh:SPARQLUpdateExecutable
  a rdfs:Class ;
  rdfs:comment "The class of SPARQL executables based on a SPARQL UPDATE."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "SPARQL UPDATE executable"@en ;
  rdfs:subClassOf sh:SPARQLExecutable ;
.
sh:Severity
  a rdfs:Class ;
  rdfs:comment "The class of validation result severity levels, including violation and warning levels."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Severity"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:Shape
  a rdfs:Class ;
  rdfs:comment "A shape is a collection of constraints that may be targeted for certain nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Shape"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:Target
  a rdfs:Class ;
  rdfs:comment "The base class of targets such as those based on SPARQL queries."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Target"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:TargetType
  a rdfs:Class ;
  rdfs:comment "The (meta) class for parameterizable targets.	Instances of this are instantiated as values of the sh:target property."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Target type"@en ;
  rdfs:subClassOf rdfs:Class ;
  rdfs:subClassOf sh:Parameterizable ;
.
sh:TripleRule
  a rdfs:Class ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "A rule based on triple (subject, predicate, object) pattern."@en ;
  rdfs:subClassOf sh:Rule ;
.
sh:UniqueLangConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to specify that no pair of value nodes may use the same language tag."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Unique-languages constraint component"@en ;
  sh:parameter sh:UniqueLangConstraintComponent-uniqueLang ;
.
sh:UniqueLangConstraintComponent-uniqueLang
  a sh:Parameter ;
  sh:path sh:uniqueLang ;
  rdfs:isDefinedBy sh: ;
  sh:datatype xsd:boolean ;
  sh:maxCount 1 ;
.
sh:ValidationReport
  a rdfs:Class ;
  rdfs:comment "The class of SHACL validation reports."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Validation report"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:ValidationResult
  a rdfs:Class ;
  rdfs:comment "The class of validation results."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Validation result"@en ;
  rdfs:subClassOf sh:AbstractResult ;
.
sh:Validator
  a rdfs:Class ;
  rdfs:comment "The class of validators, which provide instructions on how to process a constraint definition. This class serves as base class for the SPARQL-based validators and other possible implementations."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Validator"@en ;
  rdfs:subClassOf rdfs:Resource ;
.
sh:Violation
  a sh:Severity ;
  rdfs:comment "The severity for a violation validation result."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Violation"@en ;
.
sh:Warning
  a sh:Severity ;
  rdfs:comment "The severity for a warning validation result."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Warning"@en ;
.
sh:XoneConstraintComponent
  a sh:ConstraintComponent ;
  rdfs:comment "A constraint component that can be used to restrict the value nodes so that they conform to exactly one out of several provided shapes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "Exactly one constraint component"@en ;
  sh:parameter sh:XoneConstraintComponent-xone ;
.
sh:XoneConstraintComponent-xone
  a sh:Parameter ;
  sh:path sh:xone ;
  rdfs:isDefinedBy sh: ;
.
sh:alternativePath
  a rdf:Property ;
  rdfs:comment "The (single) value of this property must be a list of path elements, representing the elements of alternative paths."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "alternative path"@en ;
  rdfs:range rdf:List ;
.
sh:and
  a rdf:Property ;
  rdfs:comment "RDF list of shapes to validate the value nodes against."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "and"@en ;
  rdfs:range rdf:List ;
.
sh:annotationProperty
  a rdf:Property ;
  rdfs:comment "The annotation property that shall be set."@en ;
  rdfs:domain sh:ResultAnnotation ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "annotation property"@en ;
  rdfs:range rdf:Property ;
.
sh:annotationValue
  a rdf:Property ;
  rdfs:comment "The (default) values of the annotation property."@en ;
  rdfs:domain sh:ResultAnnotation ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "annotation value"@en ;
.
sh:annotationVarName
  a rdf:Property ;
  rdfs:comment "The name of the SPARQL variable from the SELECT clause that shall be used for the values."@en ;
  rdfs:domain sh:ResultAnnotation ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "annotation variable name"@en ;
  rdfs:range xsd:string ;
.
sh:ask
  a rdf:Property ;
  rdfs:comment "The SPARQL ASK query to execute."@en ;
  rdfs:domain sh:SPARQLAskExecutable ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "ask"@en ;
  rdfs:range xsd:string ;
.
sh:class
  a rdf:Property ;
  rdfs:comment "The type that all value nodes must have."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "class"@en ;
  rdfs:range rdfs:Class ;
.
sh:closed
  a rdf:Property ;
  rdfs:comment "If set to true then the shape is closed."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "closed"@en ;
  rdfs:range xsd:boolean ;
.
sh:condition
  a rdf:Property ;
  rdfs:comment "The shapes that the focus nodes need to conform to before a rule is executed on them."@en ;
  rdfs:domain sh:Rule ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "condition"@en ;
  rdfs:range sh:Shape ;
.
sh:conforms
  a rdf:Property ;
  rdfs:comment "True if the validation did not produce any validation results, and false otherwise."@en ;
  rdfs:domain sh:ValidationReport ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "conforms"@en ;
  rdfs:range xsd:boolean ;
.
sh:construct
  a rdf:Property ;
  rdfs:comment "The SPARQL CONSTRUCT query to execute."@en ;
  rdfs:domain sh:SPARQLConstructExecutable ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "construct"@en ;
  rdfs:range xsd:string ;
.
sh:datatype
  a rdf:Property ;
  rdfs:comment "Specifies an RDF datatype that all value nodes must have."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "datatype"@en ;
  rdfs:range rdfs:Datatype ;
.
sh:deactivated
  a rdf:Property ;
  rdfs:comment "If set to true then all nodes conform to this."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "deactivated"@en ;
  rdfs:range xsd:boolean ;
.
sh:declare
  a rdf:Property ;
  rdfs:comment "Links a resource with its namespace prefix declarations."@en ;
  rdfs:domain owl:Ontology ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "declare"@en ;
  rdfs:range sh:PrefixDeclaration ;
.
sh:defaultValue
  a rdf:Property ;
  rdfs:comment "A default value for a property, for example for user interface tools to pre-populate input fields."@en ;
  rdfs:domain sh:PropertyShape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "default value"@en ;
.
sh:description
  a rdf:Property ;
  rdfs:comment "Human-readable descriptions for the property in the context of the surrounding shape."@en ;
  rdfs:domain sh:PropertyShape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "description"@en ;
.
sh:detail
  a rdf:Property ;
  rdfs:comment "Links a result with other results that provide more details, for example to describe violations against nested shapes."@en ;
  rdfs:domain sh:AbstractResult ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "detail"@en ;
  rdfs:range sh:AbstractResult ;
.
sh:disjoint
  a rdf:Property ;
  rdfs:comment "Specifies a property where the set of values must be disjoint with the value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "disjoint"@en ;
  rdfs:range rdf:Property ;
.
sh:entailment
  a rdf:Property ;
  rdfs:comment "An entailment regime that indicates what kind of inferencing is required by a shapes graph."@en ;
  rdfs:domain owl:Ontology ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "entailment"@en ;
  rdfs:range rdfs:Resource ;
.
sh:equals
  a rdf:Property ;
  rdfs:comment "Specifies a property that must have the same values as the value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "equals"@en ;
  rdfs:range rdf:Property ;
.
sh:expression
  a rdf:Property ;
  rdfs:comment "The node expression that must return true for the value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "expression"@en ;
.
sh:filterShape
  a rdf:Property ;
  rdfs:comment "The shape that all input nodes of the expression need to conform to."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "filter shape"@en ;
  rdfs:range sh:Shape ;
.
sh:flags
  a rdf:Property ;
  rdfs:comment "An optional flag to be used with regular expression pattern matching."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "flags"@en ;
  rdfs:range xsd:string ;
.
sh:focusNode
  a rdf:Property ;
  rdfs:comment "The focus node that was validated when the result was produced."@en ;
  rdfs:domain sh:AbstractResult ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "focus node"@en ;
.
sh:group
  a rdf:Property ;
  rdfs:comment "Can be used to link to a property group to indicate that a property shape belongs to a group of related property shapes."@en ;
  rdfs:domain sh:PropertyShape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "group"@en ;
  rdfs:range sh:PropertyGroup ;
.
sh:hasValue
  a rdf:Property ;
  rdfs:comment "Specifies a value that must be among the value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "has value"@en ;
.
sh:ignoredProperties
  a rdf:Property ;
  rdfs:comment "An optional RDF list of properties that are also permitted in addition to those explicitly enumerated via sh:property/sh:path."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "ignored properties"@en ;
  rdfs:range rdf:List ;
.
sh:in
  a rdf:Property ;
  rdfs:comment "Specifies a list of allowed values so that each value node must be among the members of the given list."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "in"@en ;
  rdfs:range rdf:List ;
.
sh:intersection
  a rdf:Property ;
  rdfs:comment "A list of node expressions that shall be intersected."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "intersection"@en ;
.
sh:inversePath
  a rdf:Property ;
  rdfs:comment "The (single) value of this property represents an inverse path (object to subject)."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "inverse path"@en ;
  rdfs:range rdfs:Resource ;
.
sh:js
  a rdf:Property ;
  rdfs:comment "Constraints expressed in JavaScript." ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript constraint"@en ;
  rdfs:range sh:JSConstraint ;
.
sh:jsFunctionName
  a rdf:Property ;
  rdfs:comment "The name of the JavaScript function to execute."@en ;
  rdfs:domain sh:JSExecutable ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript function name"@en ;
  rdfs:range xsd:string ;
.
sh:jsLibrary
  a rdf:Property ;
  rdfs:comment "Declares which JavaScript libraries are needed to execute this."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript library"@en ;
  rdfs:range sh:JSLibrary ;
.
sh:jsLibraryURL
  a rdf:Property ;
  rdfs:comment "Declares the URLs of a JavaScript library. This should be the absolute URL of a JavaScript file. Implementations may redirect those to local files."@en ;
  rdfs:domain sh:JSLibrary ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "JavaScript library URL"@en ;
  rdfs:range xsd:anyURI ;
.
sh:labelTemplate
  a rdf:Property ;
  rdfs:comment "Outlines how human-readable labels of instances of the associated Parameterizable shall be produced. The values can contain {?paramName} as placeholders for the actual values of the given parameter."@en ;
  rdfs:domain sh:Parameterizable ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "label template"@en ;
.
sh:languageIn
  a rdf:Property ;
  rdfs:comment "Specifies a list of language tags that all value nodes must have."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "language in"@en ;
  rdfs:range rdf:List ;
.
sh:lessThan
  a rdf:Property ;
  rdfs:comment "Specifies a property that must have smaller values than the value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "less than"@en ;
  rdfs:range rdf:Property ;
.
sh:lessThanOrEquals
  a rdf:Property ;
  rdfs:comment "Specifies a property that must have smaller or equal values than the value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "less than or equals"@en ;
  rdfs:range rdf:Property ;
.
sh:maxCount
  a rdf:Property ;
  rdfs:comment "Specifies the maximum number of values in the set of value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "max count"@en ;
  rdfs:range xsd:integer ;
.
sh:maxExclusive
  a rdf:Property ;
  rdfs:comment "Specifies the maximum exclusive value of each value node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "max exclusive"@en ;
.
sh:maxInclusive
  a rdf:Property ;
  rdfs:comment "Specifies the maximum inclusive value of each value node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "max inclusive"@en ;
.
sh:maxLength
  a rdf:Property ;
  rdfs:comment "Specifies the maximum string length of each value node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "max length"@en ;
  rdfs:range xsd:integer ;
.
sh:message
  a rdf:Property ;
  rdfs:comment "A human-readable message (possibly with placeholders for variables) explaining the cause of the result."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "message"@en ;
.
sh:minCount
  a rdf:Property ;
  rdfs:comment "Specifies the minimum number of values in the set of value nodes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "min count"@en ;
  rdfs:range xsd:integer ;
.
sh:minExclusive
  a rdf:Property ;
  rdfs:comment "Specifies the minimum exclusive value of each value node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "min exclusive"@en ;
.
sh:minInclusive
  a rdf:Property ;
  rdfs:comment "Specifies the minimum inclusive value of each value node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "min inclusive"@en ;
.
sh:minLength
  a rdf:Property ;
  rdfs:comment "Specifies the minimum string length of each value node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "min length"@en ;
  rdfs:range xsd:integer ;
.
sh:name
  a rdf:Property ;
  rdfs:comment "Human-readable labels for the property in the context of the surrounding shape."@en ;
  rdfs:domain sh:PropertyShape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "name"@en ;
.
sh:namespace
  a rdf:Property ;
  rdfs:comment "The namespace associated with a prefix in a prefix declaration."@en ;
  rdfs:domain sh:PrefixDeclaration ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "namespace"@en ;
  rdfs:range xsd:anyURI ;
.
sh:node
  a rdf:Property ;
  rdfs:comment "Specifies the node shape that all value nodes must conform to."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "node"@en ;
  rdfs:range sh:NodeShape ;
.
sh:nodeKind
  a rdf:Property ;
  rdfs:comment "Specifies the node kind (e.g. IRI or literal) each value node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "node kind"@en ;
  rdfs:range sh:NodeKind ;
.
sh:nodeValidator
  a rdf:Property ;
  rdfs:comment "The validator(s) used to evaluate a constraint in the context of a node shape."@en ;
  rdfs:domain sh:ConstraintComponent ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "shape validator"@en ;
  rdfs:range sh:Validator ;
.
sh:nodes
  a rdf:Property ;
  rdfs:comment "The node expression producing the input nodes of a filter shape expression."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "nodes"@en ;
.
sh:not
  a rdf:Property ;
  rdfs:comment "Specifies a shape that the value nodes must not conform to."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "not"@en ;
  rdfs:range sh:Shape ;
.
sh:object
  a rdf:Property ;
  rdfs:comment "An expression producing the nodes that shall be inferred as objects."@en ;
  rdfs:domain sh:TripleRule ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "object"@en ;
.
sh:oneOrMorePath
  a rdf:Property ;
  rdfs:comment "The (single) value of this property represents a path that is matched one or more times."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "one or more path"@en ;
  rdfs:range rdfs:Resource ;
.
sh:optional
  a rdf:Property ;
  rdfs:comment "Indicates whether a parameter is optional."@en ;
  rdfs:domain sh:Parameter ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "optional"@en ;
  rdfs:range xsd:boolean ;
.
sh:or
  a rdf:Property ;
  rdfs:comment "Specifies a list of shapes so that the value nodes must conform to at least one of the shapes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "or"@en ;
  rdfs:range rdf:List ;
.
sh:order
  a rdf:Property ;
  rdfs:comment "Specifies the relative order of this compared to its siblings. For example use 0 for the first, 1 for the second."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "order"@en ;
.
sh:parameter
  a rdf:Property ;
  rdfs:comment "The parameters of a function or constraint component."@en ;
  rdfs:domain sh:Parameterizable ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "parameter"@en ;
  rdfs:range sh:Parameter ;
.
sh:path
  a rdf:Property ;
  rdfs:comment "Specifies the property path of a property shape."@en ;
  rdfs:domain sh:PropertyShape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "path"@en ;
  rdfs:range rdfs:Resource ;
.
sh:pattern
  a rdf:Property ;
  rdfs:comment "Specifies a regular expression pattern that the string representations of the value nodes must match."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "pattern"@en ;
  rdfs:range xsd:string ;
.
sh:predicate
  a rdf:Property ;
  rdfs:comment "An expression producing the properties that shall be inferred as predicates."@en ;
  rdfs:domain sh:TripleRule ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "predicate"@en ;
.
sh:prefix
  a rdf:Property ;
  rdfs:comment "The prefix of a prefix declaration."@en ;
  rdfs:domain sh:PrefixDeclaration ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "prefix"@en ;
  rdfs:range xsd:string ;
.
sh:prefixes
  a rdf:Property ;
  rdfs:comment "The prefixes that shall be applied before parsing the associated SPARQL query."@en ;
  rdfs:domain sh:SPARQLExecutable ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "prefixes"@en ;
  rdfs:range owl:Ontology ;
.
sh:property
  a rdf:Property ;
  rdfs:comment "Links a shape to its property shapes."@en ;
  rdfs:domain sh:Shape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "property"@en ;
  rdfs:range sh:PropertyShape ;
.
sh:propertyValidator
  a rdf:Property ;
  rdfs:comment "The validator(s) used to evaluate a constraint in the context of a property shape."@en ;
  rdfs:domain sh:ConstraintComponent ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "property validator"@en ;
  rdfs:range sh:Validator ;
.
sh:qualifiedMaxCount
  a rdf:Property ;
  rdfs:comment "The maximum number of value nodes that can conform to the shape."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "qualified max count"@en ;
  rdfs:range xsd:integer ;
.
sh:qualifiedMinCount
  a rdf:Property ;
  rdfs:comment "The minimum number of value nodes that must conform to the shape."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "qualified min count"@en ;
  rdfs:range xsd:integer ;
.
sh:qualifiedValueShape
  a rdf:Property ;
  rdfs:comment "The shape that a specified number of values must conform to."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "qualified value shape"@en ;
  rdfs:range sh:Shape ;
.
sh:qualifiedValueShapesDisjoint
  a rdf:Property ;
  rdfs:comment "Can be used to mark the qualified value shape to be disjoint with its sibling shapes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "qualified value shapes disjoint"@en ;
  rdfs:range xsd:boolean ;
.
sh:result
  a rdf:Property ;
  rdfs:comment "The validation results contained in a validation report."@en ;
  rdfs:domain sh:ValidationReport ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "result"@en ;
  rdfs:range sh:ValidationResult ;
.
sh:resultAnnotation
  a rdf:Property ;
  rdfs:comment "Links a SPARQL validator with zero or more sh:ResultAnnotation instances, defining how to derive additional result properties based on the variables of the SELECT query."@en ;
  rdfs:domain sh:SPARQLSelectValidator ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "result annotation"@en ;
  rdfs:range sh:ResultAnnotation ;
.
sh:resultMessage
  a rdf:Property ;
  rdfs:comment "Human-readable messages explaining the cause of the result."@en ;
  rdfs:domain sh:AbstractResult ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "result message"@en ;
.
sh:resultPath
  a rdf:Property ;
  rdfs:comment "The path of a validation result, based on the path of the validated property shape."@en ;
  rdfs:domain sh:AbstractResult ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "result path"@en ;
  rdfs:range rdfs:Resource ;
.
sh:resultSeverity
  a rdf:Property ;
  rdfs:comment "The severity of the result, e.g. warning."@en ;
  rdfs:domain sh:AbstractResult ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "result severity"@en ;
  rdfs:range sh:Severity ;
.
sh:returnType
  a rdf:Property ;
  rdfs:comment "The expected type of values returned by the associated function."@en ;
  rdfs:domain sh:Function ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "return type"@en ;
  rdfs:range rdfs:Class ;
.
sh:rule
  a rdf:Property ;
  rdfs:comment "The rules linked to a shape."@en ;
  rdfs:domain sh:Shape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "rule"@en ;
  rdfs:range sh:Rule ;
.
sh:select
  a rdf:Property ;
  rdfs:comment "The SPARQL SELECT query to execute."@en ;
  rdfs:domain sh:SPARQLSelectExecutable ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "select"@en ;
  rdfs:range xsd:string ;
.
sh:severity
  a rdf:Property ;
  rdfs:comment "Defines the severity that validation results produced by a shape must have. Defaults to sh:Violation."@en ;
  rdfs:domain sh:Shape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "severity"@en ;
  rdfs:range sh:Severity ;
.
sh:shapesGraph
  a rdf:Property ;
  rdfs:comment "Shapes graphs that should be used when validating this data graph."@en ;
  rdfs:domain owl:Ontology ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "shapes graph"@en ;
  rdfs:range owl:Ontology ;
.
sh:shapesGraphWellFormed
  a rdf:Property ;
  rdfs:comment "If true then the validation engine was certain that the shapes graph has passed all SHACL syntax requirements during the validation process."@en ;
  rdfs:domain sh:ValidationReport ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "shapes graph well-formed"@en ;
  rdfs:range xsd:boolean ;
.
sh:sourceConstraint
  a rdf:Property ;
  rdfs:comment "The constraint that was validated when the result was produced."@en ;
  rdfs:domain sh:AbstractResult ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "source constraint"@en ;
.
sh:sourceConstraintComponent
  a rdf:Property ;
  rdfs:comment "The constraint component that is the source of the result."@en ;
  rdfs:domain sh:AbstractResult ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "source constraint component"@en ;
  rdfs:range sh:ConstraintComponent ;
.
sh:sourceShape
  a rdf:Property ;
  rdfs:comment "The shape that is was validated when the result was produced."@en ;
  rdfs:domain sh:AbstractResult ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "source shape"@en ;
  rdfs:range sh:Shape ;
.
sh:sparql
  a rdf:Property ;
  rdfs:comment "Links a shape with SPARQL constraints."@en ;
  rdfs:domain sh:Shape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "constraint (in SPARQL)"@en ;
  rdfs:range sh:SPARQLConstraint ;
.
sh:subject
  a rdf:Property ;
  rdfs:comment "An expression producing the resources that shall be inferred as subjects."@en ;
  rdfs:domain sh:TripleRule ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "subject"@en ;
.
sh:suggestedShapesGraph
  a rdf:Property ;
  rdfs:comment "Suggested shapes graphs for this ontology. The values of this property may be used in the absence of specific sh:shapesGraph statements."@en ;
  rdfs:domain owl:Ontology ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "suggested shapes graph"@en ;
  rdfs:range owl:Ontology ;
.
sh:target
  a rdf:Property ;
  rdfs:comment "Links a shape to a target specified by an extension language, for example instances of sh:SPARQLTarget."@en ;
  rdfs:domain sh:Shape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "target"@en ;
  rdfs:range sh:Target ;
.
sh:targetClass
  a rdf:Property ;
  rdfs:comment "Links a shape to a class, indicating that all instances of the class must conform to the shape."@en ;
  rdfs:domain sh:Shape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "target class"@en ;
  rdfs:range rdfs:Class ;
.
sh:targetNode
  a rdf:Property ;
  rdfs:comment "Links a shape to individual nodes, indicating that these nodes must conform to the shape."@en ;
  rdfs:domain sh:Shape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "target node"@en ;
.
sh:targetObjectsOf
  a rdf:Property ;
  rdfs:comment "Links a shape to a property, indicating that all all objects of triples that have the given property as their predicate must conform to the shape."@en ;
  rdfs:domain sh:Shape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "target objects of"@en ;
  rdfs:range rdf:Property ;
.
sh:targetSubjectsOf
  a rdf:Property ;
  rdfs:comment "Links a shape to a property, indicating that all subjects of triples that have the given property as their predicate must conform to the shape."@en ;
  rdfs:domain sh:Shape ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "target subjects of"@en ;
  rdfs:range rdf:Property ;
.
sh:this
  a rdfs:Resource ;
  rdfs:comment "A node expression that represents the current focus node."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "this"@en ;
.
sh:union
  a rdf:Property ;
  rdfs:comment "A list of node expressions that shall be used together."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "union"@en ;
.
sh:uniqueLang
  a rdf:Property ;
  rdfs:comment "Specifies whether all node values must have a unique (or no) language tag."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "unique languages"@en ;
  rdfs:range xsd:boolean ;
.
sh:update
  a rdf:Property ;
  rdfs:comment "The SPARQL UPDATE to execute."@en ;
  rdfs:domain sh:SPARQLUpdateExecutable ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "update"@en ;
  rdfs:range xsd:string ;
.
sh:validator
  a rdf:Property ;
  rdfs:comment "The validator(s) used to evaluate constraints of either node or property shapes."@en ;
  rdfs:domain sh:ConstraintComponent ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "validator"@en ;
  rdfs:range sh:Validator ;
.
sh:value
  a rdf:Property ;
  rdfs:comment "An RDF node that has caused the result."@en ;
  rdfs:domain sh:AbstractResult ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "value"@en ;
.
sh:xone
  a rdf:Property ;
  rdfs:comment "Specifies a list of shapes so that the value nodes must conform to exactly one of the shapes."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "exactly one"@en ;
  rdfs:range rdf:List ;
.
sh:zeroOrMorePath
  a rdf:Property ;
  rdfs:comment "The (single) value of this property represents a path that is matched zero or more times."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "zero or more path"@en ;
  rdfs:range rdfs:Resource ;
.
sh:zeroOrOnePath
  a rdf:Property ;
  rdfs:comment "The (single) value of this property represents a path that is matched zero or one times."@en ;
  rdfs:isDefinedBy sh: ;
  rdfs:label "zero or one path"@en ;
  rdfs:range rdfs:Resource ;
.
